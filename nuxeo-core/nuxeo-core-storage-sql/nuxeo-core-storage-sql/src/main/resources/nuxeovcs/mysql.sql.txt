# (C) Copyright 2008-2009 Nuxeo SA (http://nuxeo.com/) and contributors.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the GNU Lesser General Public License
# (LGPL) version 2.1 which accompanies this distribution, and is available at
# http://www.gnu.org/licenses/lgpl.html
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# Contributors:
#     Florent Guillaume

# Variables used:
# ${idType} VARCHAR(36)

############################################################


#CATEGORY: beforeTableCreation


DROP FUNCTION IF EXISTS NX_IN_TREE;

CREATE FUNCTION NX_IN_TREE(id ${idType}, baseid ${idType})
RETURNS BOOLEAN
LANGUAGE SQL
READS SQL DATA
BEGIN
  DECLARE curid ${idType} DEFAULT id;
  IF baseid IS NULL OR id IS NULL OR baseid = id THEN
    RETURN FALSE;
  END IF;
  LOOP
    SELECT parentid INTO curid FROM hierarchy WHERE hierarchy.id = curid;
    IF curid IS NULL THEN
      RETURN FALSE;
    ELSEIF curid = baseid THEN
      RETURN TRUE;
    END IF;
  END LOOP;
END


DROP FUNCTION IF EXISTS NX_ACCESS_ALLOWED;

CREATE FUNCTION NX_ACCESS_ALLOWED(id ${idType}, users VARCHAR(10000), perms VARCHAR(10000))
RETURNS BOOLEAN
LANGUAGE SQL
READS SQL DATA
BEGIN
  DECLARE allusers VARCHAR(10000) DEFAULT CONCAT('|',users,'|');
  DECLARE allperms VARCHAR(10000) DEFAULT CONCAT('|',perms,'|');
  DECLARE first BOOLEAN DEFAULT TRUE;
  DECLARE curid ${idType} DEFAULT id;
  DECLARE newid ${idType};
  DECLARE gr BIT;
  DECLARE pe VARCHAR(1000);
  DECLARE us VARCHAR(1000);
  WHILE curid IS NOT NULL DO
    BEGIN
      DECLARE done BOOLEAN DEFAULT FALSE;
      DECLARE cur CURSOR FOR
        SELECT `grant`, `permission`, `user` FROM `acls`
        WHERE `acls`.`id` = curid ORDER BY `pos`;
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
      OPEN cur;
      REPEAT
        FETCH cur INTO gr, pe, us;
        IF NOT done THEN
          IF LOCATE(CONCAT('|',us,'|'), allusers) <> 0 AND LOCATE(CONCAT('|',pe,'|'), allperms) <> 0 THEN
            CLOSE cur;
            RETURN gr;
          END IF;
        END IF;
      UNTIL done END REPEAT;
      CLOSE cur;
    END;
    SELECT parentid INTO newid FROM hierarchy WHERE hierarchy.id = curid;
    IF first AND newid IS NULL THEN
      SELECT versionableid INTO newid FROM versions WHERE versions.id = curid;
    END IF;
    SET first = FALSE;
    SET curid = newid;
  END WHILE;
  RETURN FALSE;
END;


DROP PROCEDURE IF EXISTS NX_CLUSTER_INVAL;

CREATE PROCEDURE NX_CLUSTER_INVAL(i ${idType}, f TEXT, k TINYINT)
LANGUAGE SQL
MODIFIES SQL DATA
BEGIN
  DECLARE n BIGINT;
  DECLARE done BOOLEAN DEFAULT FALSE;
  DECLARE cur CURSOR FOR
    SELECT nodeid FROM cluster_nodes WHERE nodeid <> @@PSEUDO_THREAD_ID;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  OPEN cur;
  REPEAT
    FETCH cur INTO n;
    IF NOT done THEN
      INSERT INTO cluster_invals (nodeid, id, fragments, kind) VALUES (n, i, f, k);
    END IF;
  UNTIL done END REPEAT;
  CLOSE cur;
END;



############################################################


#CATEGORY: afterTableCreation

# nothing

############################################################


#CATEGORY: addClusterNode

DELETE N FROM cluster_nodes N WHERE
  NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.PROCESSLIST P WHERE N.nodeid = P.id);

INSERT INTO cluster_nodes (nodeid, created) VALUES (@@PSEUDO_THREAD_ID, CURRENT_TIMESTAMP);


#CATEGORY: removeClusterNode

DELETE FROM cluster_nodes WHERE nodeid = @@PSEUDO_THREAD_ID;


############################################################


#CATEGORY: testUpgrade

# here use a LONGTEXT instead of a VARCHAR to test compatibility
CREATE TABLE `testschema2` (
  `id` VARCHAR(36) NOT NULL PRIMARY KEY,
  `title` LONGTEXT
) ENGINE=InnoDB;
